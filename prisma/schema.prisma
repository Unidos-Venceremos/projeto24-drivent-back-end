// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int            @id @default(autoincrement())
  email      String         @unique @db.VarChar(255)
  password   String         @db.VarChar(255)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  Session    Session[]
  Enrollment Enrollment[]
  Ticket     Ticket[]
  Payment    Payment[]
  bedroomId  Int?
  Bedroom    Bedroom?       @relation(fields: [bedroomId], references: [id])
  Activities ActivityUser[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(255)
  backgroundImageUrl String   @db.VarChar(255)
  logoImageUrl       String   @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Ticket {
  id         Int       @id @default(autoincrement())
  presential Boolean
  userId     Int?
  User       User?     @relation(fields: [userId], references: [id])
  Payment    Payment[]
}

model Hotel {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  backgroundImageUrl  String    @db.VarChar(255)
  singleAccommodation Boolean   @default(true)
  doubleAccommodation Boolean   @default(true)
  tripleAccommodation Boolean   @default(true)
  bedrooms            Bedroom[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Bedroom {
  id        Int       @id @default(autoincrement())
  number    Int
  hotelId   Int
  typeRoom  typesRoom
  guests    User[]
  available Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Hotel Hotel @relation(fields: [hotelId], references: [id])
}

enum typesRoom {
  SINGLE
  DOUBLE
  TRIPLE
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  number    String   @db.VarChar(255)
  holder    String   @db.VarChar(255)
  cvv       String   @db.VarChar(255)
  expiry    String   @db.VarChar(255)
  ticketId  Int
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
  withHotel Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Local {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Activity  Activity[]
}

model Activity {
  id               Int            @id @default(autoincrement())
  title            String         @db.VarChar(255)
  localId          Int
  startsAt         DateTime
  endsAt           DateTime
  totalVacancies   Int
  currentVacancies Int
  participants     ActivityUser[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  Local Local @relation(fields: [localId], references: [id])

  @@unique([localId, startsAt, endsAt])
  @@index([startsAt])
}

model ActivityUser {
  id         Int      @id @default(autoincrement())
  userId     Int
  activityId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User     User     @relation(fields: [userId], references: [id])
  Activity Activity @relation(fields: [activityId], references: [id])
}
